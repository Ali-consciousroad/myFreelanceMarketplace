generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  login          String          @unique
  password       String
  address        String?         @db.VarChar(255)
  bankAccount    String?         @db.VarChar(255)
  walletAddress  String?         @db.VarChar(255)
  phoneNumber    String?         @db.VarChar(15)
  role           UserRole        @default(CLIENT)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  clerkId        String?         @unique
  client         Client?
  freelance      Freelance?
  messages       Message[]
  smartContracts SmartContract[]
}

model Freelance {
  id        String      @id @default(uuid())
  userId    String      @unique
  firstName String      @db.VarChar(255)
  lastName  String      @db.VarChar(255)
  vat       String?     @db.VarChar(50)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  portfolio Portfolio[]
  services  Service[]

  @@map("freelances")
}

model Client {
  id        String    @id @default(uuid())
  userId    String    @unique
  company   String    @db.VarChar(255)
  vat       String?   @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  missions  Mission[]

  @@map("clients")
}

model Mission {
  id          String        @id @default(uuid())
  title       String        @db.VarChar(255)
  status      MissionStatus @default(OPEN)
  dailyRate   Decimal       @db.Decimal(10, 2)
  timeframe   Int
  description String
  clientId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  contract    Contract?
  client      Client        @relation(fields: [clientId], references: [id])
  payments    Payment[]
  categories  Category[]    @relation("CategoryToMission")

  @@map("missions")
}

model Contract {
  id            String   @id @default(uuid())
  contractTerms String
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean  @default(true)
  missionId     String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  mission       Mission  @relation(fields: [missionId], references: [id])

  @@map("contracts")
}

model Payment {
  id              String   @id @default(uuid())
  amount          Decimal  @db.Decimal(15, 2)
  currency        String   @default("EUR")
  paymentMethod   String   @db.VarChar(50)
  transactionDate DateTime
  missionId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  mission         Mission  @relation(fields: [missionId], references: [id])

  @@map("payments")
}

model SmartContract {
  contractAddress String   @id
  creatorId       String
  isActive        Boolean  @default(true)
  balance         Decimal  @db.Decimal(20, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creator         User     @relation(fields: [creatorId], references: [id])

  @@map("smart_contracts")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique @db.VarChar(255)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  missions    Mission[] @relation("CategoryToMission")

  @@map("categories")
}

model Skill {
  id               String           @id @default(uuid())
  name             String           @unique @db.VarChar(255)
  description      String?
  proficiencyLevel ProficiencyLevel
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  services         Service[]

  @@map("skills")
}

model Service {
  id          String     @id @default(uuid())
  name        String     @db.VarChar(255)
  price       Decimal    @db.Decimal(10, 2)
  description String?
  skillId     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  freelanceId String?
  Freelance   Freelance? @relation(fields: [freelanceId], references: [id])
  skill       Skill      @relation(fields: [skillId], references: [id])

  @@map("services")
}

model Portfolio {
  id          String    @id @default(uuid())
  projectUrl  String?   @db.VarChar(255)
  name        String    @db.VarChar(255)
  description String?
  freelanceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  freelance   Freelance @relation(fields: [freelanceId], references: [id])

  @@map("portfolios")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  status    String   @db.VarChar(50)
  timestamp DateTime @default(now())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("messages")
}

model Chatbot {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  version   String   @db.VarChar(50)
  language  String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chatbots")
}

enum UserRole {
  FREELANCER
  CLIENT
  ADMIN
  SUPPORT
}

enum MissionStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}
